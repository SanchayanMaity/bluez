#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-2.1-or-later

import os
import signal
import sys

import dbus
import dbus.service
import dbus.mainloop.glib

import gi

gi.require_version("Gst", "1.0")
gi.require_version("GLib", "2.0")
from gi.repository import GLib, Gst

import bluezutils

mainloop = None
pipeline = None
seqnum: int = 0


def signal_handler(_sig, _frame):
    print("Got interrupt")
    mainloop.quit()


signal.signal(signal.SIGINT, signal_handler)


def usage():
    print("Usage: simple-asha <remote addr> <audio file name> (optional volume 0-127)")


def start_playback(fd1: int, fd2: int, omtu: int):
    global mainloop, pipeline
    pktsize = 161

    if omtu < pktsize:
        print("Weird mtu", omtu)

    outdata = bytearray(pktsize)

    Gst.init(None)

    pipeline = Gst.parse_launch(
        f"""
          filesrc location="{sys.argv[3]}" ! mpegaudioparse ! mpg123audiodec !
          audioconvert ! audioresample !
          audiobuffersplit output-buffer-duration="20/1000" ! avenc_g722 !
          appsink name=sink emit-signals=true
    """
    )

    def on_new_sample(sink):
        global seqnum

        sample = sink.emit("pull-sample")
        buf = sample.get_buffer()

        with buf.map(Gst.MapFlags.READ) as info:
            pos = 0

            if info.size != pktsize - 1:
                print("Unexpected buffer size: ", info.size)

            outdata[pos] = seqnum % 256
            pos += 1

            for byte in info.data:
                outdata[pos] = byte
                pos += 1

            try:
                n1 = os.write(fd1, outdata)
                n2 = os.write(fd2, outdata)
                if n1 != pktsize:
                    print("Wrote less than expected for device 1: ", n1)
                if n2 != pktsize:
                    print("Wrote less than expected for device 2: ", n2)
            except:
                return Gst.FlowReturn.ERROR

        seqnum += 1

        return Gst.FlowReturn.OK

    sink = pipeline.get_by_name("sink")
    sink.connect("new-sample", on_new_sample)

    def bus_message(_bus, message, _data) -> bool:
        typ = message.type

        if typ == Gst.MessageType.EOS:
            print("End of stream")
            mainloop.quit()
        elif typ == Gst.MessageType.ERROR:
            err, debug = message.parse_error()
            print(f"Pipeline error: {err} ({debug})")
            mainloop.quit()

        return True

    bus = pipeline.get_bus()
    bus.add_watch(GLib.PRIORITY_DEFAULT, bus_message, None)

    pipeline.set_state(Gst.State.PLAYING)


if __name__ == "__main__":
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    mainloop = GLib.MainLoop()
    bus = dbus.SystemBus()

    if (len(sys.argv) == 4) or (len(sys.argv) == 5):
        device1 = bluezutils.find_device(sys.argv[1])
        if device1 is None:
            print("Could not find device1: ", sys.argv[1])
            exit(255)
        device2 = bluezutils.find_device(sys.argv[2])
        if device2 is None:
            print("Could not find device2: ", sys.argv[2])
            exit(255)
    else:
        usage()
        sys.exit(255)

    asha1_object_path = device1.object_path + "/asha"

    print("Looking up ASHA object", asha1_object_path)
    asha1 = bus.get_object("org.bluez", asha1_object_path)

    print("Looking up endpoint properties for", asha1.object_path)
    props = asha1.GetAll(
        "org.bluez.MediaEndpoint1",
        dbus_interface="org.freedesktop.DBus.Properties",
    )
    path1 = props["Transport"]

    print("Trying to acquire", path1)
    transport1 = dbus.Interface(
        bus.get_object("org.bluez", path1),
        "org.bluez.MediaTransport1",
    )

    asha2_object_path = device2.object_path + "/asha"

    print("Looking up ASHA object", asha2_object_path)
    asha2 = bus.get_object("org.bluez", asha2_object_path)

    print("Looking up endpoint properties for", asha2.object_path)
    props = asha2.GetAll(
        "org.bluez.MediaEndpoint1",
        dbus_interface="org.freedesktop.DBus.Properties",
    )
    path2 = props["Transport"]

    print("Trying to acquire", path2)
    transport2 = dbus.Interface(
        bus.get_object("org.bluez", path2),
        "org.bluez.MediaTransport1",
    )

    # Keep default volume at 25%
    volume = 127
    # if len(sys.argv) == 5:
    #     volume = int(sys.argv[4])
    #     if volume < 0 or volume > 127:
    #         print("Volume must be between 0 (mute) and 127 (max)")

    print("Setting initial volume to", volume)
    transport1.Set(
        "org.bluez.MediaTransport1",
        "Volume",
        dbus.UInt16(volume, variant_level=1),
        dbus_interface="org.freedesktop.DBus.Properties",
    )
    transport2.Set(
        "org.bluez.MediaTransport1",
        "Volume",
        dbus.UInt16(volume, variant_level=1),
        dbus_interface="org.freedesktop.DBus.Properties",
    )

    print("Acquiring transport for Device 1")
    (fd1, imtu, omtu) = transport1.Acquire()

    print("Acquiring transport for Device 2")
    (fd2, imtu, omtu) = transport2.Acquire()

    print("Starting playback, hit Ctrl-C to stop")
    start_playback(fd1.take(), fd2.take(), omtu)

    Gst.debug_bin_to_dot_file_with_ts(
        pipeline, Gst.DebugGraphDetails.VERBOSE, "gst-asha"
    )

    mainloop.run()

    pipeline.set_state(Gst.State.NULL)
    transport1.Release()
    transport2.Release()
